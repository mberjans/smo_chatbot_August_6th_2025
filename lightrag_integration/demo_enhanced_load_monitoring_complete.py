#!/usr/bin/env python3
"""
Complete Enhanced Load Monitoring System Demonstration
=====================================================

This demonstration script showcases the complete enhanced load monitoring and detection
system for the Clinical Metabolomics Oracle, including:

1. Enhanced real-time metrics collection
2. Hysteresis-based threshold management
3. Production monitoring integration
4. Graceful degradation system integration
5. Trend analysis and predictive capabilities
6. Performance optimizations and caching

The demonstration simulates various load conditions and shows how the system responds
with intelligent degradation strategies and stable threshold management.

Usage:
    python demo_enhanced_load_monitoring_complete.py [--duration 60] [--verbose]

Author: Claude Code (Anthropic)
Version: 1.0.0
Created: 2025-08-09
"""

import asyncio
import argparse
import json
import logging
import random
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any
import sys
import os

# Add parent directory to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from enhanced_load_monitoring_system import (
        EnhancedLoadDetectionSystem,
        EnhancedSystemLoadMetrics,
        HysteresisConfig,
        create_enhanced_load_monitoring_system
    )
    from production_monitoring_integration import (
        ProductionMonitoringAdapter,
        GracefulDegradationIntegrator,
        IntegrationConfig,
        create_integrated_monitoring_system,
        setup_complete_integration
    )
    from graceful_degradation_system import (
        SystemLoadLevel,
        LoadThresholds,
        GracefulDegradationManager,
        create_production_degradation_system
    )
    ENHANCED_MONITORING_AVAILABLE = True
except ImportError as e:
    print(f"Enhanced monitoring components not available: {e}")
    ENHANCED_MONITORING_AVAILABLE = False
    sys.exit(1)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


# ============================================================================
# MOCK PRODUCTION SYSTEMS FOR DEMONSTRATION
# ============================================================================

class MockProductionMonitoring:
    """Mock production monitoring system for demonstration."""
    
    def __init__(self):
        self.system_metrics = {}
        self.enhanced_metrics = {}
        self.request_queue_depth = 15
        self.active_connections = 75
        self.error_metrics = {'error_types': {}, 'total_errors': 0}
        self.response_times = []
        self.alert_thresholds = {}
        self.logger = logging.getLogger(f"{__name__}.MockProductionMonitoring")
        
    def update_system_metrics(self, memory_usage_bytes: int, cpu_usage_percent: float):
        \"\"\"Update basic system metrics.\"\"\"
        self.system_metrics = {
            'memory_usage_bytes': memory_usage_bytes,
            'cpu_usage_percent': cpu_usage_percent,
            'timestamp': datetime.now().isoformat()
        }
        self.logger.info(f"System metrics updated: CPU={cpu_usage_percent:.1f}%, Memory={memory_usage_bytes/(1024*1024):.0f}MB")\n    \n    async def update_enhanced_metrics(self, enhanced_payload: Dict[str, Any]):\n        \"\"\"Update enhanced metrics.\"\"\"\n        self.enhanced_metrics = enhanced_payload\n        self.logger.info(f\"Enhanced metrics updated: Level={enhanced_payload.get('load_level', 'Unknown')}\")\n    \n    def update_load_balancer_metrics(self, queue_depth: int, active_connections: int, error_rate: float):\n        \"\"\"Update load balancer metrics.\"\"\"\n        self.request_queue_depth = queue_depth\n        self.active_connections = active_connections\n        self.logger.debug(f\"Load balancer metrics: Queue={queue_depth}, Connections={active_connections}, Errors={error_rate:.2f}%\")\n    \n    def update_performance_metrics(self, response_time_p95: float, response_time_p99: float):\n        \"\"\"Update performance metrics.\"\"\"\n        self.logger.debug(f\"Performance metrics: P95={response_time_p95:.1f}ms, P99={response_time_p99:.1f}ms\")\n    \n    def get_request_queue_depth(self) -> int:\n        \"\"\"Get current request queue depth.\"\"\"\n        # Simulate varying queue depth\n        variation = random.randint(-5, 10)\n        self.request_queue_depth = max(0, self.request_queue_depth + variation)\n        return self.request_queue_depth\n    \n    def get_active_connections(self) -> int:\n        \"\"\"Get current active connections.\"\"\"\n        # Simulate varying connection count\n        variation = random.randint(-10, 15)\n        self.active_connections = max(10, self.active_connections + variation)\n        return self.active_connections\n    \n    def get_connection_metrics(self) -> Dict[str, int]:\n        \"\"\"Get connection metrics.\"\"\"\n        return {\n            'queue_depth': self.get_request_queue_depth(),\n            'active_connections': self.get_active_connections()\n        }\n    \n    def get_error_metrics(self) -> Dict[str, Any]:\n        \"\"\"Get error metrics.\"\"\"\n        return self.error_metrics\n    \n    def get_response_time_data(self) -> Dict[str, List[float]]:\n        \"\"\"Get response time data.\"\"\"\n        # Generate some sample response times\n        sample_times = [random.uniform(200, 2000) for _ in range(random.randint(10, 50))]\n        return {'response_times': sample_times}\n    \n    def update_alert_thresholds(self, threshold_data: Dict[str, float]):\n        \"\"\"Update alert thresholds.\"\"\"\n        self.alert_thresholds.update(threshold_data)\n        self.logger.info(f\"Alert thresholds updated: {threshold_data}\")\n    \n    def get_status(self) -> Dict[str, Any]:\n        \"\"\"Get current status of mock production monitoring.\"\"\"\n        return {\n            'system_metrics': self.system_metrics,\n            'enhanced_metrics_count': len(self.enhanced_metrics),\n            'request_queue_depth': self.request_queue_depth,\n            'active_connections': self.active_connections,\n            'alert_thresholds_count': len(self.alert_thresholds)\n        }\n\n\nclass LoadSimulator:\n    \"\"\"Simulates various load patterns for demonstration.\"\"\"\n    \n    def __init__(self, enhanced_detector: EnhancedLoadDetectionSystem):\n        self.enhanced_detector = enhanced_detector\n        self.logger = logging.getLogger(f"{__name__}.LoadSimulator")\n        self.simulation_phase = \"normal\"\n        self.phase_start_time = time.time()\n        self.request_counter = 0\n    \n    async def simulate_load_patterns(self, duration: float):\n        \"\"\"Simulate various load patterns over time.\"\"\"\n        end_time = time.time() + duration\n        \n        while time.time() < end_time:\n            current_time = time.time()\n            phase_duration = current_time - self.phase_start_time\n            \n            # Determine current simulation phase\n            if phase_duration > 20:  # Change phase every 20 seconds\n                self._transition_to_next_phase()\n                self.phase_start_time = current_time\n            \n            # Simulate load based on current phase\n            await self._simulate_phase_load()\n            \n            await asyncio.sleep(0.5)  # Simulate requests every 500ms\n    \n    def _transition_to_next_phase(self):\n        \"\"\"Transition to the next simulation phase.\"\"\"\n        phases = [\"normal\", \"elevated\", \"high\", \"critical\", \"recovery\"]\n        current_index = phases.index(self.simulation_phase)\n        next_index = (current_index + 1) % len(phases)\n        \n        previous_phase = self.simulation_phase\n        self.simulation_phase = phases[next_index]\n        \n        self.logger.info(f\"Simulation phase transition: {previous_phase} â†’ {self.simulation_phase}\")\n    \n    async def _simulate_phase_load(self):\n        \"\"\"Simulate load based on current phase.\"\"\"\n        self.request_counter += 1\n        \n        if self.simulation_phase == \"normal\":\n            await self._simulate_normal_load()\n        elif self.simulation_phase == \"elevated\":\n            await self._simulate_elevated_load()\n        elif self.simulation_phase == \"high\":\n            await self._simulate_high_load()\n        elif self.simulation_phase == \"critical\":\n            await self._simulate_critical_load()\n        elif self.simulation_phase == \"recovery\":\n            await self._simulate_recovery_load()\n    \n    async def _simulate_normal_load(self):\n        \"\"\"Simulate normal load conditions.\"\"\"\n        # Low response times, few errors\n        response_time = random.uniform(200, 800)\n        error_type = \"timeout\" if random.random() < 0.001 else None  # 0.1% error rate\n        \n        self.enhanced_detector.record_request_metrics(response_time, error_type)\n        self.enhanced_detector.update_queue_depth(random.randint(5, 15))\n        self.enhanced_detector.update_connection_count(random.randint(40, 80))\n    \n    async def _simulate_elevated_load(self):\n        \"\"\"Simulate elevated load conditions.\"\"\"\n        # Moderate response times, some errors\n        response_time = random.uniform(500, 1500)\n        error_type = \"timeout\" if random.random() < 0.005 else None  # 0.5% error rate\n        \n        self.enhanced_detector.record_request_metrics(response_time, error_type)\n        self.enhanced_detector.update_queue_depth(random.randint(15, 30))\n        self.enhanced_detector.update_connection_count(random.randint(60, 120))\n    \n    async def _simulate_high_load(self):\n        \"\"\"Simulate high load conditions.\"\"\"\n        # Higher response times, more errors\n        response_time = random.uniform(1000, 3000)\n        error_type = None\n        if random.random() < 0.01:  # 1% error rate\n            error_type = random.choice([\"timeout\", \"connection_error\", \"service_unavailable\"])\n        \n        self.enhanced_detector.record_request_metrics(response_time, error_type)\n        self.enhanced_detector.update_queue_depth(random.randint(30, 60))\n        self.enhanced_detector.update_connection_count(random.randint(100, 200))\n    \n    async def _simulate_critical_load(self):\n        \"\"\"Simulate critical load conditions.\"\"\"\n        # Very high response times, significant errors\n        response_time = random.uniform(2000, 8000)\n        error_type = None\n        if random.random() < 0.025:  # 2.5% error rate\n            error_type = random.choice([\"timeout\", \"connection_error\", \"service_unavailable\", \"rate_limit\"])\n        \n        self.enhanced_detector.record_request_metrics(response_time, error_type)\n        self.enhanced_detector.update_queue_depth(random.randint(60, 120))\n        self.enhanced_detector.update_connection_count(random.randint(150, 300))\n    \n    async def _simulate_recovery_load(self):\n        \"\"\"Simulate recovery load conditions.\"\"\"\n        # Gradually improving conditions\n        base_response = random.uniform(800, 2000)\n        # Add some recovery jitter\n        recovery_factor = max(0.3, 1.0 - ((time.time() - self.phase_start_time) / 20))\n        response_time = base_response * recovery_factor\n        \n        error_type = \"timeout\" if random.random() < 0.008 else None  # 0.8% error rate\n        \n        self.enhanced_detector.record_request_metrics(response_time, error_type)\n        queue_depth = max(5, int(40 * recovery_factor))\n        self.enhanced_detector.update_queue_depth(queue_depth)\n        connection_count = min(100, int(80 + 50 * recovery_factor))\n        self.enhanced_detector.update_connection_count(connection_count)\n\n\n# ============================================================================\n# MONITORING DASHBOARD\n# ============================================================================\n\nclass MonitoringDashboard:\n    \"\"\"Real-time monitoring dashboard for demonstration.\"\"\"\n    \n    def __init__(self):\n        self.metrics_history = []\n        self.level_changes = []\n        self.integration_events = []\n        self.start_time = time.time()\n        self.logger = logging.getLogger(f"{__name__}.MonitoringDashboard")\n    \n    def on_metrics_update(self, metrics: EnhancedSystemLoadMetrics):\n        \"\"\"Handle metrics updates.\"\"\"\n        self.metrics_history.append({\n            'timestamp': metrics.timestamp.isoformat(),\n            'load_level': metrics.load_level.name,\n            'load_score': metrics.load_score,\n            'cpu_utilization': metrics.cpu_utilization,\n            'memory_pressure': metrics.memory_pressure,\n            'response_time_p95': metrics.response_time_p95,\n            'response_time_p99': metrics.response_time_p99,\n            'error_rate': metrics.error_rate,\n            'queue_depth': metrics.request_queue_depth,\n            'active_connections': metrics.active_connections,\n            'hysteresis_factor': getattr(metrics, 'hysteresis_factor_applied', 1.0),\n            'trend_indicators': getattr(metrics, 'trend_indicators', {})\n        })\n        \n        # Track level changes\n        if (not self.level_changes or \n            self.level_changes[-1]['load_level'] != metrics.load_level.name):\n            self.level_changes.append({\n                'timestamp': metrics.timestamp.isoformat(),\n                'load_level': metrics.load_level.name,\n                'load_score': metrics.load_score,\n                'degradation_active': metrics.degradation_recommended\n            })\n            \n            # Print significant level changes\n            if metrics.load_level.value >= 2:  # HIGH or above\n                self.logger.warning(\n                    f\"Load level escalation: {metrics.load_level.name} \"\n                    f\"(Score: {metrics.load_score:.3f}, Degradation: {metrics.degradation_recommended})\"\n                )\n            elif len(self.level_changes) > 1:\n                self.logger.info(f\"Load level change: {metrics.load_level.name}\")\n    \n    def on_integration_event(self, event_type: str, details: Dict[str, Any]):\n        \"\"\"Handle integration events.\"\"\"\n        self.integration_events.append({\n            'timestamp': datetime.now().isoformat(),\n            'event_type': event_type,\n            'details': details\n        })\n        \n        self.logger.info(f\"Integration event: {event_type} - {details}\")\n    \n    def print_current_status(self, enhanced_detector: EnhancedLoadDetectionSystem, \n                           adapter: ProductionMonitoringAdapter):\n        \"\"\"Print current system status.\"\"\"\n        if not self.metrics_history:\n            print(\"No metrics available yet...\")\n            return\n        \n        latest_metrics = self.metrics_history[-1]\n        runtime = time.time() - self.start_time\n        \n        print(f\"\\n{'=' * 80}\")\n        print(f\"ENHANCED LOAD MONITORING DASHBOARD - Runtime: {runtime:.1f}s\")\n        print(f\"{'=' * 80}\")\n        \n        # Current status\n        print(f\"Current Load Level: {latest_metrics['load_level']} (Score: {latest_metrics['load_score']:.3f})\")\n        print(f\"System Metrics:\")\n        print(f\"  CPU: {latest_metrics['cpu_utilization']:.1f}%\")\n        print(f\"  Memory: {latest_metrics['memory_pressure']:.1f}%\")\n        print(f\"  Queue Depth: {latest_metrics['queue_depth']} requests\")\n        print(f\"  Active Connections: {latest_metrics['active_connections']}\")\n        print(f\"Response Times:\")\n        print(f\"  P95: {latest_metrics['response_time_p95']:.1f}ms\")\n        print(f\"  P99: {latest_metrics['response_time_p99']:.1f}ms\")\n        print(f\"Error Rate: {latest_metrics['error_rate']:.2f}%\")\n        \n        # Hysteresis information\n        print(f\"Hysteresis Factor: {latest_metrics['hysteresis_factor']:.2f}\")\n        \n        # Trend information\n        trend_indicators = latest_metrics.get('trend_indicators', {})\n        if trend_indicators:\n            print(f\"Trends:\")\n            for trend_name, trend_value in trend_indicators.items():\n                direction = \"â†—\" if trend_value > 0.1 else \"â†˜\" if trend_value < -0.1 else \"â†’\"\n                print(f\"  {trend_name}: {trend_value:.3f} {direction}\")\n        \n        # Level change history\n        if len(self.level_changes) > 1:\n            print(f\"Recent Level Changes:\")\n            for change in self.level_changes[-5:]:\n                timestamp = datetime.fromisoformat(change['timestamp'])\n                print(f\"  {timestamp.strftime('%H:%M:%S')} - {change['load_level']}\")\n        \n        # Integration status\n        integration_status = adapter.get_integration_status()\n        print(f\"Integration Status:\")\n        print(f\"  Active: {integration_status['active']}\")\n        print(f\"  Sync Active: {integration_status['sync_active']}\")\n        print(f\"  Fallback Mode: {integration_status['fallback_mode']}\")\n        print(f\"  Sync Failures: {integration_status['sync_failures']}\")\n        \n        # Statistics\n        print(f\"Statistics:\")\n        print(f\"  Metrics Collected: {len(self.metrics_history)}\")\n        print(f\"  Level Changes: {len(self.level_changes)}\")\n        print(f\"  Integration Events: {len(self.integration_events)}\")\n        print(f\"  History Size: {len(enhanced_detector.metrics_history)}\")\n        \n        print(f\"{'=' * 80}\\n\")\n    \n    def generate_summary_report(self) -> Dict[str, Any]:\n        \"\"\"Generate final summary report.\"\"\"\n        if not self.metrics_history:\n            return {'error': 'No metrics collected'}\n        \n        # Calculate statistics\n        load_scores = [m['load_score'] for m in self.metrics_history]\n        cpu_values = [m['cpu_utilization'] for m in self.metrics_history]\n        response_times = [m['response_time_p95'] for m in self.metrics_history]\n        \n        level_distribution = {}\n        for change in self.level_changes:\n            level = change['load_level']\n            level_distribution[level] = level_distribution.get(level, 0) + 1\n        \n        return {\n            'demonstration_summary': {\n                'runtime_seconds': time.time() - self.start_time,\n                'total_metrics': len(self.metrics_history),\n                'level_changes': len(self.level_changes),\n                'integration_events': len(self.integration_events)\n            },\n            'load_statistics': {\n                'average_load_score': sum(load_scores) / len(load_scores),\n                'max_load_score': max(load_scores),\n                'min_load_score': min(load_scores),\n                'load_score_std': (sum((x - sum(load_scores)/len(load_scores))**2 for x in load_scores) / len(load_scores))**0.5\n            },\n            'performance_statistics': {\n                'average_cpu': sum(cpu_values) / len(cpu_values),\n                'max_cpu': max(cpu_values),\n                'average_response_p95': sum(response_times) / len(response_times),\n                'max_response_p95': max(response_times)\n            },\n            'level_distribution': level_distribution,\n            'hysteresis_events': sum(1 for m in self.metrics_history if m['hysteresis_factor'] != 1.0),\n            'degradation_events': len([c for c in self.level_changes if c.get('degradation_active', False)])\n        }\n\n\n# ============================================================================\n# MAIN DEMONSTRATION FUNCTION\n# ============================================================================\n\nasync def run_complete_demonstration(duration: float = 120, verbose: bool = False):\n    \"\"\"Run complete enhanced load monitoring demonstration.\"\"\"\n    \n    print(\"\\n\" + \"=\" * 100)\n    print(\"CLINICAL METABOLOMICS ORACLE - ENHANCED LOAD MONITORING DEMONSTRATION\")\n    print(\"=\" * 100)\n    print(f\"Duration: {duration} seconds\")\n    print(f\"Verbose: {verbose}\")\n    print(f\"Start Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n    print(\"=\" * 100)\n    \n    # Configure logging level\n    if verbose:\n        logging.getLogger().setLevel(logging.DEBUG)\n    \n    try:\n        # Step 1: Create mock production monitoring\n        print(\"\\n[1/8] Creating mock production monitoring system...\")\n        mock_production_monitoring = MockProductionMonitoring()\n        \n        # Step 2: Create enhanced monitoring system with production integration\n        print(\"[2/8] Creating enhanced load monitoring system...\")\n        \n        # Custom thresholds for demonstration\n        demo_thresholds = LoadThresholds(\n            cpu_normal=40.0,\n            cpu_elevated=55.0,\n            cpu_high=70.0,\n            cpu_critical=80.0,\n            cpu_emergency=90.0,\n            \n            memory_normal=50.0,\n            memory_elevated=60.0,\n            memory_high=70.0,\n            memory_critical=80.0,\n            memory_emergency=85.0,\n            \n            queue_normal=10,\n            queue_elevated=20,\n            queue_high=35,\n            queue_critical=60,\n            queue_emergency=100,\n            \n            response_p95_normal=800.0,\n            response_p95_elevated=1500.0,\n            response_p95_high=2500.0,\n            response_p95_critical=4000.0,\n            response_p95_emergency=6000.0,\n            \n            error_rate_normal=0.1,\n            error_rate_elevated=0.5,\n            error_rate_high=1.0,\n            error_rate_critical=2.0,\n            error_rate_emergency=3.0\n        )\n        \n        # Hysteresis configuration\n        demo_hysteresis = HysteresisConfig(\n            enabled=True,\n            down_factor=0.85,\n            up_factor=1.0,\n            stability_window=3,\n            min_dwell_time=8.0\n        )\n        \n        # Integration configuration\n        integration_config = IntegrationConfig(\n            sync_interval=3.0,\n            bidirectional_sync=True,\n            enable_metrics_caching=True,\n            cache_ttl=2.0,\n            enable_enhanced_metrics=True,\n            enable_trend_analysis=True\n        )\n        \n        # Create integrated system\n        enhanced_detector, adapter, degradation_integrator = create_integrated_monitoring_system(\n            production_monitoring=mock_production_monitoring,\n            integration_config=integration_config,\n            hysteresis_config=demo_hysteresis,\n            monitoring_interval=2.0\n        )\n        \n        # Override thresholds for demonstration\n        enhanced_detector.thresholds = demo_thresholds\n        \n        print(f\"  âœ“ Enhanced detector created with {len(demo_thresholds.__dict__)} threshold settings\")\n        print(f\"  âœ“ Production adapter created with {integration_config.sync_interval}s sync interval\")\n        print(f\"  âœ“ Hysteresis enabled with {demo_hysteresis.down_factor} down factor\")\n        \n        # Step 3: Create monitoring dashboard\n        print(\"[3/8] Setting up monitoring dashboard...\")\n        dashboard = MonitoringDashboard()\n        \n        # Add callbacks\n        enhanced_detector.add_load_change_callback(dashboard.on_metrics_update)\n        \n        adapter.add_integration_callback(\n            lambda metrics: dashboard.on_integration_event(\"metrics_sync\", {\n                'load_level': getattr(metrics, 'load_level', {}).name if hasattr(metrics, 'load_level') else 'Unknown'\n            })\n        )\n        \n        # Step 4: Create load simulator\n        print(\"[4/8] Setting up load simulator...\")\n        load_simulator = LoadSimulator(enhanced_detector)\n        \n        # Step 5: Start all systems\n        print(\"[5/8] Starting monitoring systems...\")\n        await enhanced_detector.start_monitoring()\n        await adapter.start_integration()\n        \n        print(\"  âœ“ Enhanced monitoring started\")\n        print(\"  âœ“ Production integration started\")\n        \n        # Step 6: Run demonstration\n        print(f\"[6/8] Running demonstration for {duration} seconds...\")\n        \n        # Start dashboard updates\n        async def dashboard_updates():\n            while True:\n                await asyncio.sleep(10)  # Update every 10 seconds\n                dashboard.print_current_status(enhanced_detector, adapter)\n        \n        dashboard_task = asyncio.create_task(dashboard_updates())\n        \n        # Start load simulation\n        simulation_task = asyncio.create_task(\n            load_simulator.simulate_load_patterns(duration)\n        )\n        \n        # Wait for simulation to complete or dashboard task to be cancelled\n        try:\n            await simulation_task\n        finally:\n            dashboard_task.cancel()\n            try:\n                await dashboard_task\n            except asyncio.CancelledError:\n                pass\n        \n        # Step 7: Stop systems\n        print(\"[7/8] Stopping monitoring systems...\")\n        await adapter.stop_integration()\n        await enhanced_detector.stop_monitoring()\n        \n        print(\"  âœ“ Integration stopped\")\n        print(\"  âœ“ Enhanced monitoring stopped\")\n        \n        # Step 8: Generate final report\n        print(\"[8/8] Generating final report...\")\n        \n        # Final status display\n        dashboard.print_current_status(enhanced_detector, adapter)\n        \n        # Summary report\n        summary_report = dashboard.generate_summary_report()\n        \n        print(\"\\n\" + \"=\" * 100)\n        print(\"DEMONSTRATION SUMMARY REPORT\")\n        print(\"=\" * 100)\n        \n        print(json.dumps(summary_report, indent=2))\n        \n        # Export data for analysis\n        export_data = {\n            'demonstration_config': {\n                'duration': duration,\n                'thresholds': demo_thresholds.__dict__,\n                'hysteresis_config': demo_hysteresis.__dict__,\n                'integration_config': integration_config.__dict__\n            },\n            'final_metrics': enhanced_detector.export_metrics_for_analysis(),\n            'dashboard_data': {\n                'metrics_history': dashboard.metrics_history[-50:],  # Last 50 entries\n                'level_changes': dashboard.level_changes,\n                'integration_events': dashboard.integration_events\n            },\n            'production_monitoring_status': mock_production_monitoring.get_status(),\n            'summary_report': summary_report\n        }\n        \n        # Save to file\n        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n        export_filename = f\"enhanced_load_monitoring_demo_{timestamp}.json\"\n        \n        with open(export_filename, 'w') as f:\n            json.dump(export_data, f, indent=2, default=str)\n        \n        print(f\"\\nâœ“ Complete demonstration data exported to: {export_filename}\")\n        \n        print(\"\\n\" + \"=\" * 100)\n        print(\"DEMONSTRATION COMPLETED SUCCESSFULLY\")\n        print(\"=\" * 100)\n        \n        # Summary statistics\n        stats = summary_report.get('demonstration_summary', {})\n        performance = summary_report.get('performance_statistics', {})\n        load_stats = summary_report.get('load_statistics', {})\n        \n        print(f\"Runtime: {stats.get('runtime_seconds', 0):.1f} seconds\")\n        print(f\"Metrics Collected: {stats.get('total_metrics', 0)}\")\n        print(f\"Load Level Changes: {stats.get('level_changes', 0)}\")\n        print(f\"Average Load Score: {load_stats.get('average_load_score', 0):.3f}\")\n        print(f\"Max Load Score: {load_stats.get('max_load_score', 0):.3f}\")\n        print(f\"Average CPU: {performance.get('average_cpu', 0):.1f}%\")\n        print(f\"Average Response P95: {performance.get('average_response_p95', 0):.1f}ms\")\n        print(f\"Hysteresis Events: {summary_report.get('hysteresis_events', 0)}\")\n        print(f\"Degradation Events: {summary_report.get('degradation_events', 0)}\")\n        \n        return export_data\n        \n    except Exception as e:\n        logger.error(f\"Error in demonstration: {e}\")\n        raise\n\n\n# ============================================================================\n# COMMAND LINE INTERFACE\n# ============================================================================\n\ndef main():\n    \"\"\"Main function for command-line execution.\"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Enhanced Load Monitoring System Demonstration\",\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        epilog=\"\"\"\nExamples:\n  python demo_enhanced_load_monitoring_complete.py\n  python demo_enhanced_load_monitoring_complete.py --duration 180 --verbose\n  python demo_enhanced_load_monitoring_complete.py --duration 60\n\nThis demonstration shows:\n- Real-time load monitoring with hysteresis\n- Production system integration\n- Intelligent threshold management\n- Trend analysis and predictions\n- Performance optimizations\n        \"\"\"\n    )\n    \n    parser.add_argument(\n        '--duration', '-d',\n        type=float,\n        default=120,\n        help='Demonstration duration in seconds (default: 120)'\n    )\n    \n    parser.add_argument(\n        '--verbose', '-v',\n        action='store_true',\n        help='Enable verbose logging'\n    )\n    \n    parser.add_argument(\n        '--export-only', '-e',\n        action='store_true',\n        help='Only export configuration without running demonstration'\n    )\n    \n    args = parser.parse_args()\n    \n    if args.export_only:\n        # Just export configuration\n        config_export = {\n            'enhanced_monitoring_available': ENHANCED_MONITORING_AVAILABLE,\n            'default_duration': 120,\n            'components': [\n                'EnhancedLoadDetectionSystem',\n                'ProductionMonitoringAdapter',\n                'HysteresisConfig',\n                'LoadThresholds',\n                'TrendAnalyzer'\n            ]\n        }\n        \n        print(json.dumps(config_export, indent=2))\n        return\n    \n    if not ENHANCED_MONITORING_AVAILABLE:\n        print(\"Error: Enhanced monitoring components are not available.\")\n        print(\"Please ensure all required modules are installed and accessible.\")\n        sys.exit(1)\n    \n    # Validate duration\n    if args.duration <= 0 or args.duration > 3600:\n        print(\"Error: Duration must be between 1 and 3600 seconds.\")\n        sys.exit(1)\n    \n    try:\n        # Run the demonstration\n        asyncio.run(run_complete_demonstration(\n            duration=args.duration,\n            verbose=args.verbose\n        ))\n    except KeyboardInterrupt:\n        print(\"\\n\\nDemonstration interrupted by user.\")\n        sys.exit(0)\n    except Exception as e:\n        print(f\"\\nError running demonstration: {e}\")\n        if args.verbose:\n            import traceback\n            traceback.print_exc()\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()